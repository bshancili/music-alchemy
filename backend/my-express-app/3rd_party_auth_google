
const admin_g = require("firebase-admin");
const { getFirestore, setDoc, doc, deleteDoc } = require("firebase/firestore");
const { getAuth, signInWithRedirect, getRedirectResult, GoogleAuthProvider } = require("firebase/auth");

const serviceAccount_g = require("./music-alchemy-firebase-adminsdk.json");

const FIREBASE_API_KEY_g = "AIzaSyDoWU1lhDCZnwWYGIxH2Zqz5CimeTbTFS0";

// Initialize Firebase
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount_g),
});
const db_g = admin.firestore();
const auth_g = admin.getAuth();
const provider = new GoogleAuthProvider();





// Initialize Firebase Web SDK for client-side authentication

signInWithRedirect(auth_g, provider);
//redirects to google authentication
getRedirectResult(auth_g)
  .then((result) => {
    // This gives you a Google Access Token. You can use it to access Google APIs.
    const credential = provider.credentialFromResult(result);
    const token = credential.accessToken;

    // The signed-in user info.
    const user = result.user;
    // IdP data available using getAdditionalUserInfo(result)
    if (result.additionalUserInfo.isNewUser) {
        const defaultValues = {
            Isprivate: 0,
            comments: [],
            created_songs: {},
            friends_list: [],
            liked_song_list: {},
            liked_songs: [],
            profile_picture_url: "https://static.vecteezy.com/system/resources/previews/005/129/844/non_2x/profile-user-icon-isolated-on-white-background-eps10-free-vector.jpg",
            rated_song_list: {},
            uid: user.uid,
            username: user.displayName || user.email.split('@')[0], // Use displayName or create a username from the email
          };
        // Create a new user document in Firestore
        setDoc(doc(db_g, "users", user.uid),defaultValues)
        .then(() => {
          // Handle success if needed
        }).catch((error) => {
          // Handle errors if needed
        });
      }
    })
  .catch((error) => {
    // Handle Errors here.
    const errorCode = error.code;
    const errorMessage = error.message;
    // The email of the user's account used.
    const email = error.customData.email;
    // The AuthCredential type that was used.
    const credential = provider.credentialFromError(error);
  });
